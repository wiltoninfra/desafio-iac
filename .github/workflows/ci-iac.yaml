name: ci-iac-terraform validate

on:
  pull_request:
    branches: [main]
    paths:
      - 'iac/**'

jobs:
  terraform-checklist:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      TF_LOG: error

    steps:
      - uses: actions/checkout@v3

      - name: "Install terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.8

      - name: Terraform fmt
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=environments/backend.dev.hcl -var-file=environments/dev.tfvars

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=environments/dev.tfvars -out plan.tfplan | grep -E '(^.*[#~+-] .*|^[[:punct:]]|Plan)'

      - name: Save Plan JSON
        run: echo '${{ steps.show.outputs.stdout }}' > plan.json

      - name: Resume terraform
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.CI_GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  finops-costs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac   
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      TF_LOG: info
      TF_ROOT: ./
      
    needs: terraform-checklist
    steps:
    
      - uses: actions/checkout@v3

      - name: "Install terraform"
        uses:  hashicorp/setup-terraform@v2

      - name: Terraform init
        run: terraform init -backend-config=environments/backend.dev.hcl -var-file=environments/dev.tfvars
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -var-file=environments/dev.tfvars -out plan.tfplan | grep -E '(^.*[#~+-] .*|^[[:punct:]]|Plan)'
        continue-on-error: true

      - name: Terraform show
        run: terraform show -json plan.tfplan > plan.json
        continue-on-error: true

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      - name: Checkout PR branch
        uses: actions/checkout@v3

      - name: Run infracost diff
        id: infracost
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: |
          infracost diff --path=${TF_ROOT} \
                        --format=json \
                        --compare-to=/tmp/infracost-base.json \
                        --out-file=/tmp/infracost.json

      - name: Post Infracost comment
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}    
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                    --repo=wiltoninfra/desafio-iac \
                                    --github-token=${{ secrets.CI_GITHUB_TOKEN }} \
                                    --pull-request=${{github.event.pull_request.number}} \
                                    --behavior=update

  security-scans:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac     
    needs: terraform-checklist
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: "Install terraform"
      uses:  hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=environments/backend.dev.hcl -var-file=environments/dev.tfvars

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=environments/dev.tfvars -out plan.tfplan | grep -E '(^.*[#~+-] .*|^[[:punct:]]|Plan)'

    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@v12.873.0
      with:
        directory: .
        framework: terraform
      continue-on-error: true

    - name: Run tfsec action
      id: tfsec
      uses: aquasecurity/tfsec-pr-commenter-action@main
      with:
        github_token: ${{ secrets.CI_GITHUB_TOKEN }}
      continue-on-error: true